{"version":3,"sources":[".././src/extension.js",".././src/genericFunctions.js","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":["vscode","genFunc","listChars","activate","context","functionBegin","commands","registerCommand","async","isHTMLcode","getActiveEditor","textLang","getLang","window","showErrorMessage","SelectedTextRange","getRangeSelected","docText","getTextSelected","spanPattern","RegExp","undefined","match","replace","deleteUselessSpan","deleteDomains","searchReplaceFromProperties","updateEditor","executeCommand","cleanCodeBegin","functionEnd","workspace","getConfiguration","convertFrenchNumbers","setFrenchNumber","cleanCodeEnd","convertSpecialCharacters","i","accentedCharacters","length","tmpPatern","name","tmpRegEx","character","convertSepecialCharacters","subscriptions","push","configDomainsToRemove","domainsToDelete","deleteSubDomains","includeSubDomainsInDeletion","domainsToRemoveString","forEach","elem","substr","patternText","domainsPattern","property","searchReplace","srPattern","search","multipass","exports","module","deactivate","htmlCode","placeToUpdate","activeTextEditor","edit","text","selectWholeText","editor","this","theRange","selection","isEmpty","Range","document","positionAt","getText","start","end","extensionConfigurationName","textLanguages","listLang","options","QuickPickOptions","placeHolder","canPickMany","ignoreFocusOut","matchOnDescription","matchOnDetail","langName","showQuickPick","landCode","langCode","languageId","getPositionSelection","myEditor","startSelectionRange","Position","getDOMelementPosition","DOM","DOMelem","fromSelection","startSelectionPosition","nodeElem","nodeLocation","startTag","startLine","line","startCol","endLine","endCol","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"extension.js","sourcesContent":["const vscode = require('vscode');\nconst genFunc = require('./genericFunctions');\n\n// Read the JSON file that contains characters definitions (it's imported as JSON object, not string)\nconst listChars = require('../lib/special_characters.json');\n\n\n/**\n * * This method is called when extension is activated\n * @param {vscode.ExtensionContext} context\n */\nfunction activate(context) {\n\n\tlet functionBegin = vscode.commands.registerCommand('html-code-cleaner-tools.begin', async function () {\n\t\tawait cleanCodeBegin();\n\t});\n\n\tlet functionEnd = vscode.commands.registerCommand('html-code-cleaner-tools.end', function () {\n\t\tcleanCodeEnd();\n\t});\n\n\tlet convertSpecialCharacters = vscode.commands.registerCommand('html-code-cleaner-tools.convert-special-characters', function () {\n\t\tconvertSepecialCharacters();\n\t});\n\n\tcontext.subscriptions.push(functionBegin);\n\tcontext.subscriptions.push(functionEnd);\n\tcontext.subscriptions.push(convertSpecialCharacters);\n}\n\n// this method is called when extension is deactivated\nfunction deactivate() { }\nexports.activate = activate;\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}\n\n\n/* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* */\n/* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* */\n/* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* */\n\n\n/**\n * This method cleans the code of unwanted/useless code/characters/etc\n * Execute regex replacement stored in the Extenstion's properties\n */\nasync function cleanCodeBegin() {\n\t// Validate if the code is HTML, if not stop process\n\tif (!genFunc.isHTMLcode()) {\n\t\treturn;\n\t}\n\n\t// Select the current editor, if no one available then show an error message and exit\n\tconst myEditor = genFunc.getActiveEditor();\n\tif (!myEditor) {\n\t\treturn false;\n\t}\n\n\t// Get the language of the text in the code\n\tconst textLang = await genFunc.getLang(\"html-code-cleaner-tools\");\n\tif (textLang == null) {\n\t\tvscode.window.showErrorMessage(\"The extension is experiencing an issue related to Language of text. Check Extension's properties to fix potential conflicts.\");\n\t\treturn;\n\t}\n\n\t// Define the whole document as range. Range is required to update the Editor's content\n\tconst SelectedTextRange = genFunc.getRangeSelected(true);\n\n\t// Get the selected text in the Active Editor\n\tlet docText = genFunc.getTextSelected(true);\n\n\t// Delete useless empty SPAN and SPAN LANG of the text of in the code\n\tdocText = deleteUselessSpan(docText, textLang);\n\n\t// Delete domain in \"A href\" and \"IMG src\"\n\tdocText = deleteDomains(docText);\n\n\t// Apply all RegEx stored in the Extension's properties for the Begin script\n\tdocText = searchReplaceFromProperties(docText, \"SearchReplaceBegin\");\n\n\t// Replace the content of the Active Editor with the new one cleanned\n\tgenFunc.updateEditor(docText, SelectedTextRange);\n\n\t// Execute the commande \"Format Document\" to set the code more readable\n\tvscode.commands.executeCommand(\"editor.action.formatDocument\");\n}\n\n\n\n/**\n * This method cleans/set the code before to publish it.\n * Execute regex replacement stored in the Extenstion's properties\n */\nfunction cleanCodeEnd() {\n\t// Validate if the code is HTML\n\tif (!genFunc.isHTMLcode()) {\n\t\treturn;\n\t}\n\n\t// Select the current editor, if no one available then show an error message and exit\n\tconst myEditor = genFunc.getActiveEditor();\n\tif (!myEditor) {\n\t\treturn false;\n\t}\n\n\t// Define the whole document as range. Range is required to update the Editor's content\n\tconst SelectedTextRange = genFunc.getRangeSelected(true);\n\n\t// Get the selected text in the Active Editor\n\tlet docText = genFunc.getTextSelected(true);\n\n\t// ****** MAIN PROCESS - Apply replacement ****** \n\t// TODO: \tAdd a DOM to keep all A tag with FILE: protocol and replace \\ by / and space by %20\n\t// \t\t\t\tMust be executed before all other replacement - \n\n\t// Delete domain in \"A href\" and \"IMG src\"\n\tdocText = deleteDomains(docText);\n\n\t// Apply all RegEx stored in the Extension's properties for the Begin script\n\tdocText = searchReplaceFromProperties(docText, \"SearchReplaceEnd\");\n\n\t// Convert French Number to replace space by no-blank-space\n\tdocText = setFrenchNumber(docText);\n\n\t// Replace the content of the Active Editor with the new one cleanned\n\tgenFunc.updateEditor(docText, SelectedTextRange);\n\n\t// Execute the commande \"Format Document\" to set the code more readable\n\tvscode.commands.executeCommand(\"editor.action.formatDocument\");\n}\n\n\n/**\n * This method convert all special characters by the characters itself\n * For now, this funciton only convert accented characters coded with the name not the number.\n */\nfunction convertSepecialCharacters() {\n\t// Validate if the code is HTML\n\tif (!genFunc.isHTMLcode()) {\n\t\treturn;\n\t}\n\n\t// Select the current editor, if no one available then show an error message and exit\n\tconst myEditor = genFunc.getActiveEditor();\n\tif (!myEditor) {\n\t\treturn false;\n\t}\n\n\t// Define the whole document as range. Range is required to update the Editor's content\n\tconst SelectedTextRange = genFunc.getRangeSelected(true);\n\n\t// Get the selected text in the Active Editor\n\tlet docText = genFunc.getTextSelected(true);\n\n\t// ****** MAIN PROCESS - Apply replacement ****** \n\t// Pass through out all characters and replace their name (&#####;) by their character (x) in the selected part of text\n\t// Only the name is replaced. Special characters coded with their number is kept in the code.\n\tfor (let i = 0; i < listChars.accentedCharacters.length; i++) {\n\t\t// Define the RegEx partern \n\t\tlet tmpPatern = listChars.accentedCharacters[i].name;\n\t\t// Create a temporary RegEx object\n\t\tlet tmpRegEx = new RegExp(tmpPatern, \"g\");\n\t\t// Proceed to replacement of all instances of the character's name by the caracter itself\n\t\tdocText = docText.replace(tmpRegEx, listChars.accentedCharacters[i].character);\n\t}\n\n\t// Replace the content of the Active Editor with the new one cleanned\n\tgenFunc.updateEditor(docText, SelectedTextRange);\n}\n\n\n\n\n\n/**\n * Method to delete all domain stored in the Extension's properties\n * Domains are removed from the A tags and IMG tags\n * @param {string} docText HTML code source to clean\n * If no properties set, the docText is return without any changes\n * Return HTML code with domains removed from \"a href\" and \"img src\"\n */\nfunction deleteDomains(docText) {\n\t// Get list of domains to remove in links (stored in Extension's properties)\n\tconst configDomainsToRemove = vscode.workspace.getConfiguration(\"html-code-cleaner-tools\").domainsToDelete;\n\tconst deleteSubDomains = vscode.workspace.getConfiguration(\"html-code-cleaner-tools\").includeSubDomainsInDeletion;\n\n\t// If no domain to remove then only return the original docText\n\tif (configDomainsToRemove.length < 1 || configDomainsToRemove == null) {\n\t\treturn docText;\n\t}\n\n\t// Initial the variable (empty)\n\tlet domainsToRemoveString = '';\n\t// Pass through all domains in properties\n\tconfigDomainsToRemove.forEach(function (elem) {\n\t\telem = elem.replace(\".\", \"\\\\.\");\n\t\t// Check if sub-domains must be deleted\n\t\tif (deleteSubDomains) {\n\t\t\t// Add regex part to includes subdomains if present\n\t\t\tdomainsToRemoveString = domainsToRemoveString + \"(.*?\\\\.)*?\" + elem + \"|\";\n\t\t} else {\n\t\t\t// Use only domain defined in properties\n\t\t\tdomainsToRemoveString = domainsToRemoveString + elem + \"|\";\n\t\t}\n\t});\n\t// Remove the \"|\" at the end of the string\n\tdomainsToRemoveString = domainsToRemoveString.substr(0, domainsToRemoveString.length - 1);\n\n\t// Create a regex pattern\n\tlet patternText = \"(href=['\\\"])http(s*):\\\\/\\\\/(\" + domainsToRemoveString + \")\";\n\tlet domainsPattern = new RegExp(patternText, \"gmi\");\n\n\t// Delete all Domains in \"href\"\n\tdocText = docText.replace(domainsPattern, '$1');\n\n\t// Delete all Domains in \"IMG src\"\n\tpatternText = \"(<img.*?)(src=['\\\"])http(s*):\\\\/\\\\/(\" + domainsToRemoveString + \")\";\n\tdomainsPattern = new RegExp(patternText, \"gmi\");\n\tdocText = docText.replace(domainsPattern, '$1$2');\n\n\t// Return the code cleaned\n\treturn docText;\n}\n\n\n\n/**\n * Method that delete all empty SPAN tag, \n * delete SPAN with the same language than the one selected by user with the popop,\n * or remove the lang=\"XX\" from the SPAN if ID or class is set in the SPAN.\n * ie.: If it's a English text (content) then all \"SPAN LANG='EN'\" are useless and must be deleted\n * @param {string} docText HTML code source to clean\n *\n * Return HTML code with domains removed from \"a href\" and \"img src\"\n */\nfunction deleteUselessSpan(docText, textLang) {\n\t// This pattern remove only empty SPAN and SPAN LANG=\"XX\"... \n\t//let patternText = \"<span(.*?)lang=[\\\"']\" + textLang + \"[\\\"'](.*?)>(.*?)<\\\\/span>|<span>(.*?)<\\\\/span>\";\n\t// This pattern remove Empty SPAN and SPAN lang=\"XX\" or the lang=\"xx\" if SPAN has ID or CSS class\n\tlet patternText = \"(<span.*?)\\\\s*lang=[\\\"']\" + textLang + \"[\\\"'](.*?>.*?<\\\\/span>)|<span(.*?)lang=[\\\"']\" + textLang + \"[\\\"'](.*?)>(.*?)<\\\\/span>|<span>(.*?)<\\\\/span>\";\n\tconst spanPattern = new RegExp(patternText, \"gmi\");\n\t// Execute the replacement until the regex pattern is present in the code\n\twhile (docText.match(spanPattern) != undefined) {\n\t\tdocText = docText.replace(spanPattern, '$1$2$3$6');\n\t}\n\n\t// Return the code cleaned\n\treturn docText;\n}\n\n\n/**\n * Method that replace space in French number by no-blank-space. Do the same with $ and % symbol.\n * ie.: 1 123 $  =  1&#160;123&#160;$\n * @param {string} docText HTML code source to clean\n *\n * Return HTML code with domains removed from \"a href\" and \"img src\"\n */\nfunction setFrenchNumber(docText) {\n\t// Check if French number conversion must be applied\n\tconst convertFrenchNumber = vscode.workspace.getConfiguration(\"html-code-cleaner-tools\").convertFrenchNumbers;\n\tif (convertFrenchNumber) {\n\t\t// Regex pattern\n\t\tlet patternText = \"(\\\\d) +(\\\\d{3})\";\n\t\tconst spanPattern = new RegExp(patternText, \"gmi\");\n\t\t// Execute the regex until the pattern is present in the docText\n\t\twhile (docText.match(spanPattern) != undefined) {\n\t\t\tdocText = docText.replace(spanPattern, '$1&#160;$2');\n\t\t}\n\t\t// Adding no-blank-space before $ and % symbols\n\t\tdocText = docText.replace(/(\\d) *([$%])/gmi, '$1&#160;$2');\n\t}\n\t// Return the code cleaned\n\treturn docText;\n}\n\n\n/**\n * Method that executes Regex stored in the Extension's properties\n * @param {string} docText HTML code source to clean\n * @param {string} property the Extension Property name to use for the Search and replace\n * Return the HTML code updated\n */\nfunction searchReplaceFromProperties(docText, property) {\n\t// Retrieve the Search and Replace information to execute (store in Extension's properties)\n\tconst searchReplace = vscode.workspace.getConfiguration('html-code-cleaner-tools')[property];\n\t// If Search and Replace to execute then process\n\tif (searchReplace != null && searchReplace.length > 0) {\n\t\t// Process each Search/Replace stored\n\t\tsearchReplace.forEach(function (elem) {\n\t\t\t// Create regex pattern\n\t\t\tlet srPattern = new RegExp(elem.search, \"gmi\");\n\t\t\t// If the regex must be executed many times or only one\n\t\t\tif (elem.multipass) {\n\t\t\t\t// Pass through the docText until Pattern is present\n\t\t\t\twhile (docText.match(srPattern) != undefined) {\n\t\t\t\t\tdocText = docText.replace(srPattern, elem.replace);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Execute only once the regex\n\t\t\t\tdocText = docText.replace(srPattern, elem.replace);\n\t\t\t}\n\t\t});\n\t}\n\t// Return the processed text\n\treturn docText;\n}","\"use strict\";\nconst vscode = require('vscode');\n\nmodule.exports = {\n\n  /**\n   * Method to update the range of the Active Editor content\n   * @param {string} htmlCode Contains the string to add/replace in the editor\n   * @param {Range} placeToUpdate Contains the range in the editor to insert/replace\n   */\n  updateEditor: function updateEditor(htmlCode, placeToUpdate) {\n    // Get the ActiveEditor\n    const editor = vscode.window.activeTextEditor;\n\n    // Update the content in the range defined before.\n    editor.edit((text) => {\n      text.replace(placeToUpdate, htmlCode);\n    });\n  },\n\n\n  /**\n   * Method to get the current active editor\n   * If no editor is opened then return false\n   * else return the active editor\n   */\n  getActiveEditor: function getActiveEditor() {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      vscode.window.showErrorMessage('No editor available.');\n      return false;\n    } else {\n      return editor;\n    }\n  },\n\n\n  /**\n   * Method to get the range of text selected\n   * @param {boolean} selectWholeText If no text selected then the whole text is selected\n   */\n  getRangeSelected: function getRangeSelected(selectWholeText = false) {\n    const editor = this.getActiveEditor();\n    let theRange = null;\n    // If no text selected and parameters \"selectWholeText\" is TRUE then select the whole text\n    if (editor.selection.isEmpty && selectWholeText) {\n      // Get the whole content\n      theRange = new vscode.Range(editor.document.positionAt(0), editor.document.positionAt(editor.document.getText().length));\n    } else {\n      // Define the selected text as range\n      theRange = new vscode.Range(editor.selection.start, editor.selection.end);\n    }\n    return theRange;\n  },\n\n\n\n  /**\n   * Method to get text selected in editor\n   * @param {boolean} selectWholeText If no text selected then the whole text is selected\n   * Return the text selected or whole text\n   */\n  getTextSelected: function getTextSelected(selectWholeText = false) {\n    const editor = this.getActiveEditor();\n    let theRange = this.getRangeSelected(selectWholeText);\n\n    return editor.document.getText(theRange);\n  },\n\n\n\n  /**\n   * Method that asks to user the language (english, french, etc) of the text (content) in the code\n   * The list could be stored in the Extension's properties but by default \"editor.textLanguages\" is used.\n   * In the default situation, the user's settings must have the \"editor.textLanguages\" parameters set properly.\n   */\n  getLang: async function getLang(extensionConfigurationName = \"editor\") {\n    // Get Extension properties\n    const textLanguages = vscode.workspace.getConfiguration(extensionConfigurationName).textLanguages;\n    if (textLanguages == null || textLanguages == undefined) {\n      vscode.window.showErrorMessage(\"The '\" + extensionConfigurationName + \".textLanguages' is not set properly.\");\n      return null;\n    }\n\n    // Create a empty array that will contain all Workspace Names\n    let listLang = [];\n\n    // Option for the dropdown popup\n    let options = vscode.QuickPickOptions = {\n      placeHolder: \"Select the language of the text in the code:\",\n      canPickMany: false,\n      ignoreFocusOut: true,\n      matchOnDescription: true,\n      matchOnDetail: true\n    };\n\n    // Pass through all Workspace set in Extension properties\n    textLanguages.forEach(function (elem) {\n      // Add only the name to the array\n      listLang.push(elem.langName);\n    });\n\n    // Display the dropdown popup to user\n    const langName = await vscode.window.showQuickPick(listLang, options);\n    // If Escape key has been used = exit without any other process\n    if (langName == undefined) {\n      return null;\n    }\n\n    // Define de default return for this function (null)\n    let landCode = null;\n    // Pass through all Workspace set in Extension properties\n    textLanguages.forEach(function (elem) {\n      // If the user's selection match set the path to return\n      if (langName == elem.langName) {\n        landCode = elem.langCode;\n      }\n    });\n\n    // Return the path or NULL if the escape key has been used\n    return landCode;\n  },\n\n\n\n  /**\n   * Methode to check the file type to validate if it's HTML\n   * Return TRUE if file type is HTML\n   * \t\t\t\tFLASE if it's not HTML\n   */\n  isHTMLcode: function isHTMLcode() {\n    const document_lang = vscode.window.activeTextEditor.document.languageId;\n    if (document_lang != \"html\") {\n      vscode.window.showErrorMessage(\"The file must be HTML, this script works only for HTML file.\");\n      return false;\n    } else {\n      return true;\n    }\n  },\n\n  /**\n   * Method to get the position of the Selection in the Active Text Editor.\n   * Return: the start position of the selection\n   *         If no selection, then create a start position to 0,0 (beginning of the text editor)\n   */\n  getPositionSelection: function getPositionSelection() {\n    const myEditor = this.getActiveEditor();\n    let startSelectionRange;\n\n    if (myEditor.selection.isEmpty) {\n      startSelectionRange = new vscode.Position(0, 0);\n    } else {\n      startSelectionRange = myEditor.selection.start;\n    }\n\n    return startSelectionRange;\n  },\n\n\n  /** ***********************************************************************************************\n   * @param {JSDOM} DOM \n   * @param {JSDOM.nodeElem} DOMelem Element of DOM to get the range position in Editor\n   * @param {boolean} fromSelection Indicates if the Selection starting point must be added or not.\n   */\n  getDOMelementPosition: function getDOMelementPosition(DOM, DOMelem, fromSelection = true) {\n    let startSelectionPosition;\n\n    // Get the node location\n    const nodeElem = DOM.nodeLocation(DOMelem);\n\n    // if the selection position must be considered than rerieve Selection's start position\n    // If not then the position won't be incremented\n    if (fromSelection){\n      startSelectionPosition = this.getPositionSelection();\n    } else {\n      new vscode.Position(0, 0);\n    }\n    \n    // Set the range of text the header in error\n    const elemRange = new vscode.Range(\n      nodeElem.startTag.startLine - 1 + startSelectionPosition.line,\n      nodeElem.startTag.startCol - 1,\n      nodeElem.startTag.endLine - 1 + startSelectionPosition.line,\n      nodeElem.startTag.endCol - 1\n    );\n\n    return elemRange;\n  }\n};","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(474);\n"],"sourceRoot":""}