{"version":3,"sources":[".././lib/editorFunctions.js",".././src/extension.js","../external \"vscode\"","../webpack/bootstrap","../webpack/startup"],"names":["vscode","module","exports","updateEditor","htmlCode","placeToUpdate","window","activeTextEditor","edit","text","replace","getActiveEditor","showErrorMessage","getRangeSelected","selectWholeText","editor","this","theRange","selection","isEmpty","Range","document","positionAt","getText","length","start","end","getTextSelected","listChars","activate","context","functionBegin","commands","registerCommand","SelectedTextRange","docText","undefined","match","executeCommand","cleanCodeBegin","functionEnd","cleanCodeEnd","convertSpecialCharacters","i","accentedCharacters","tmpPatern","name","tmpRegEx","RegExp","character","convertSepecialCharacters","subscriptions","push","deactivate","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"extension.js","sourcesContent":["\"use strict\";\nconst vscode = require('vscode');\n\nmodule.exports = {\n\n  /**\n   * Method to update the range of the Active Editor content\n   * @param {string} htmlCode Contains the string to add/replace in the editor\n   * @param {Range} placeToUpdate Contains the range in the editor to insert/replace\n   */\n  updateEditor: function updateEditor(htmlCode, placeToUpdate) {\n    // Get the ActiveEditor\n    const editor = vscode.window.activeTextEditor;\n\n    // Update the content in the range defined before.\n    editor.edit((text) => {\n      text.replace(placeToUpdate, htmlCode);\n    });\n  },\n\n\n\n\n  /**\n   * Method to get the current active editor\n   * If no editor is opened then return false\n   * else return the active editor\n   */\n  getActiveEditor: function getActiveEditor() {\n    const editor = vscode.window.activeTextEditor;\n    if (!editor) {\n      vscode.window.showErrorMessage('No editor available.');\n      return false;\n    } else {\n      return editor;\n    }\n  },\n\n\n  /**\n   * Method to get the range of text selected\n   * @param {boolean} selectWholeText If no text selected then the whole text is selected\n   */\n  getRangeSelected: function getRangeSelected(selectWholeText = false) {\n    const editor = this.getActiveEditor();\n    let theRange = null;\n    // If no text selected and parameters \"selectWholeText\" is TRUE then select the whole text\n    if (editor.selection.isEmpty && selectWholeText) {\n      // Get the whole content\n      theRange = new vscode.Range(editor.document.positionAt(0), editor.document.positionAt(editor.document.getText().length));\n    } else {\n      // Define the selected text as range\n      theRange = new vscode.Range(editor.selection.start, editor.selection.end);\n    }\n    return theRange;\n  },\n\n\n\n  /**\n   * Method to get text selected in editor\n   * @param {boolean} selectWholeText If no text selected then the whole text is selected\n   */\n  getTextSelected: function getTextSelected(selectWholeText = false) {\n    const editor = this.getActiveEditor();\n    let theRange = this.getRangeSelected(selectWholeText);\n\n    return editor.document.getText(theRange);\n  }\n};","const vscode = require('vscode');\n// Read the JSON file that contains characters definitions (it's imported as JSON object, not string)\nconst listChars = require('../lib/special_characters.json');\nconst editor = require('../lib/editorFunctions');\n\n/**\n * * This method is called when extension is activated\n * @param {vscode.ExtensionContext} context\n */\nfunction activate(context) {\n\tlet functionBegin = vscode.commands.registerCommand('ddpd.code-cleaner_begin', function () {\n\t\tcleanCodeBegin();\n\t});\n\n\tlet functionEnd = vscode.commands.registerCommand('ddpd.code-cleaner_end', function () {\n\t\tcleanCodeEnd();\n\t});\n\n\tlet convertSpecialCharacters = vscode.commands.registerCommand('ddpd.convert-special-characters', function () {\n\t\tconvertSepecialCharacters();\n\t});\n\n\tcontext.subscriptions.push(functionBegin);\n\tcontext.subscriptions.push(functionEnd);\n\tcontext.subscriptions.push(convertSpecialCharacters);\n}\n\n// this method is called when extension is deactivated\nfunction deactivate() { }\n\nexports.activate = activate;\n\nmodule.exports = {\n\tactivate,\n\tdeactivate\n}\n\n\n/* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* */\n/* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* */\n/* *#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#* */\n\n\n/**\n * This method clean the code of unwanted code/characters/etc\n * Replace one or many spaces/no blank spance to only one space\n * Remove all unwanted format coding (italic, superscript, underline)\n */\nfunction cleanCodeBegin() {\n\t// Select the current editor, if no one available then show an error message and exit\n\tconst myEditor = editor.getActiveEditor();\n\tif (!myEditor) {\n\t\treturn false;\n\t}\n\n\t// Define the whole document as range. Range is required to update the Editor's content\n\tconst SelectedTextRange = editor.getRangeSelected(true);\n\n\t// Get the selected text in the Active Editor\n\tlet docText = editor.getTextSelected(true);\n\n\t// ****** MAIN PROCESS - Apply replacement - Start ****** \n\t// Delete all spaces at the beginning of lines.. To push the code the the left\n\tdocText = docText.replace(/^\\s*/gmi, '');\n\t\n\t// Delete all tag <a name> but keep the content.\n\twhile (docText.match(/<a name=[\"'].*?[\"']>(.*?)<\\/a>/gmi) != undefined) {\n\t\tdocText = docText.replace(/<a name=[\"'].*?[\"']>(.*?)<\\/a>/gmi, '$1');\n\t}\n\t\n\t// Delete all empty tag <span>\n\twhile (docText.match(/<span>(.*?)<\\/span>/gmi) != undefined) {\n\t\tdocText = docText.replace(/<span>(.*?)<\\/span>/gmi, '$1');\n\t}\n\t\n\t// Delete all tag <ins ...></ins>\n\twhile (docText.match(/<ins.*?>(.*?)<\\/ins>/gmi) != undefined) {\n\t\tdocText = docText.replace(/<ins.*?>(.*?)<\\/ins>/gmi, '$1');\n\t}\n\t\n\t// Delete empty P tag (contains only space)\n\tdocText = docText.replace(/<p>(&#160;|&nbsp;|\\s*)<\\/p>/gmi, '');\n\t\n\t// Convert coded no-blank-space by a normal space\n\tdocText = docText.replace(/(&#160;|&nbsp;)/gmi, ' ');\n\t\n\t// Delete all \"http://infozone|workzone|staging\" in \"href\"\n\t\t// Best way to doing that but Office VSCode version not updated enough to using it.. Using Workaround afert the commented line below\n\t\t// docText = docText.replace(/(?<=href=[\"'])http(s?):\\/\\/(infozone|workzone|staging)(?=\\/(english|francais))/gmi, '');\n\tdocText = docText.replace(/(href=['\"])http(s*):\\/\\/(infozone|workzone|staging)(\\/(english|francais)\\/)/gmi, '$1$4');\n\t\n\t// Remove all tags : italic and underline but keep the content\n\tdocText = docText.replace(/(<\\/?em>|<\\/?i>|<\\/?u>)/gmi, '');\n\t\n\t// ****** MAIN PROCESS - Apply replacement - END ****** \n\t\n\t// Replace the content of the Active Editor with the new one cleanned\n\teditor.updateEditor(docText, SelectedTextRange);\n\n\t// Execute the commande \"Format Document\" to set the code more readable\n\tvscode.commands.executeCommand(\"editor.action.formatDocument\");\n}\n\n\n\n/**\n * This method replace not standard characters, add no blank space before and convert some characters\n */\nfunction cleanCodeEnd() {\n\t// Select the current editor, if no one available then show an error message and exit\n\tconst myEditor = editor.getActiveEditor();\n\tif (!myEditor) {\n\t\treturn false;\n\t}\n\n\t// Define the whole document as range. Range is required to update the Editor's content\n\tconst SelectedTextRange = editor.getRangeSelected(true);\n\n\t// Get the selected text in the Active Editor\n\tlet docText = editor.getTextSelected(true);\n\n\t// ****** MAIN PROCESS - Apply replacement ****** \n\t// TODO: \tAdd a DOM to keep all A tag with FILE: protocol and replace \\ by / and space by %20\n\t// \t\t\t\tMust be executed before all other replacement - \n\t\n\tdocText = docText.replace(/(href=['\"])http(s*):\\/\\/(infozone|workzone|staging)(\\/(english|francais)\\/)/gmi, '$1$4');\n\tdocText = docText.replace(/«(\\s|&#160;|&nbsp;)*|«/gmi, '«&#160;');\n\tdocText = docText.replace(/(\\s|&#160;|&nbsp;)*»|»/gmi, '&#160;»');\n\tdocText = docText.replace(/[’‘‛]/gmi, \"'\");\n\tdocText = docText.replace(/[“”‟]/gmi, '\"');\n\tdocText = docText.replace(/(\\s|&#160;|&nbsp;)+-(\\s|&#160;|&nbsp;)+/gmi, ' – ');\n\tdocText = docText.replace(/(\\s|&#160;|&nbsp;)+\\:(\\s|&#160;|&nbsp;)*/gmi, '&#160;:$2');\n\n\t// Replace the content of the Active Editor with the new one cleanned\n\teditor.updateEditor(docText, SelectedTextRange);\n\n\t// Execute the commande \"Format Document\" to set the code more readable\n\tvscode.commands.executeCommand(\"editor.action.formatDocument\");\n}\n\n\n/**\n * This method convert all special characters by the characters itself\n * For now, this funciton only convert accented characters coded with the name not the number.\n */\nfunction convertSepecialCharacters() {\n\t// Select the current editor, if no one available then show an error message and exit\n\tconst myEditor = editor.getActiveEditor();\n\tif (!myEditor) {\n\t\treturn false;\n\t}\n\n\t// Define the whole document as range. Range is required to update the Editor's content\n\tconst SelectedTextRange = editor.getRangeSelected(true);\n\n\t// Get the selected text in the Active Editor\n\tlet docText = editor.getTextSelected(true);\n\t\n\t// ****** MAIN PROCESS - Apply replacement ****** \n\t// Pass through out all characters and replace their name (&#####;) by their character (x) in the selected part of text\n\t// Only the name is replaced. Special characters coded with their number is kept in the code.\n\tfor(let i=0; i<listChars.accentedCharacters.length; i++){\n\t\t// Define the RegEx partern \n\t\tlet tmpPatern = listChars.accentedCharacters[i].name;\n\t\t// Create a temporary RegEx object\n\t\tlet tmpRegEx = new RegExp(tmpPatern, \"g\");\n\t\t// Proceed to replacement of all instances of the character's name by the caracter itself\n\t\tdocText = docText.replace(tmpRegEx, listChars.accentedCharacters[i].character);\n\t}\n\t\n\t// Replace the content of the Active Editor with the new one cleanned\n\teditor.updateEditor(docText, SelectedTextRange);\n}","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(474);\n"],"sourceRoot":""}